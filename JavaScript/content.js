// content.ts
var htmlListItems = `
<li><span class=\"emphasis\">Hypertext Markup Language (HTML)</span> is one of the three cornerstone languages.</li>
<li><span class=\"emphasis\">HTML</span> is used to create the <span class=\"emphasis\">structure</span> of a webpage.</li>
<li>It is made up of <span class=\"emphasis\">elements</span> which work together to provide content and the basic framework for all pages on the web.</li>
<li>There are multiple types of elements including: <span class=\"emphasis\">text, image, header, and list</span>.</li>
<li><span class=\"emphasis\">Elements</span> are also used to <span class=\"emphasis\">divide</span> the <span\ class=\"emphasis\">content</span> on the page and to <span class=\"emphasis\">describe</span> the <span\ class=\"emphasis\">content</span> to <span class=\"emphasis\">browsers</span> and other developers.</li>
<li>Common types of <span class=\"emphasis\">elements</span> used to <span class=\"emphasis\">divide content</span> are: <span class=\"emphasis\">meta-related, content division, and semantic elements</span>.</li>
<li>The following element contains information or <span class=\"emphasis\">metadata</span> that helps the <span class=\"emphasis\">browser</span> to <span class=\"emphasis\">render</span> the page correctly.
<ol><li type=\"i\"><pre class=\"code\"><code>&lt;head&gt;</code></pre></li></ol></li>
<li>The <span class=\"emphasis\">(body)</span> element represents the <span class=\"emphasis\">visible content</span> shown to the <span class=\"emphasis\">user</span>.</li>
<li>\n            Any content we want the <span class=\"emphasis\">end user</span> to see and <span\n              class=\"emphasis\">interact</span> with must be placed inside the <span class=\"emphasis\">\"body\"</span>\n            element.\n          </li>\n\n          <li>\n            The \"<span class=\"emphasis\">DOCTYPE html</span>\" at the top of the page is considered a \"<span\n              class=\"emphasis\">declaration</span>\".\n          </li>\n\n          <li>\n            <span class=\"emphasis\">\"Declarations\"</span> are used to tell the browser what document type it should\n            expect when opened.\n          </li>\n\n          <li>\n            <span class=\"emphasis\">\"DOCTYPE\"</span> is <span class=\"emphasis\">NOT</span> <span id=\"case-sense\">case\n              sensitive</span>, but <span class=\"emphasis\">HTML</span> elements <span class=\"emphasis\">are</span>.\n          </li>\n\n          <li>\n            \"Metadata\" is data about the webpage that the browser uses to effectively serve our webpage to users.\n          </li>\n\n          <li>\n            \"Metadata\" is not typically seen by users.\n          </li>\n\n          <li>\n            The \"style\" element defines the CSS styles associated with a website.\n          </li>\n\n          <li>\n            The \"base\" element defines the URL for a webpage.\n          </li>\n\n          <li>\n            The \"meta\" element defines metadata such as the character set, description, keywords, author, and viewport.\n          </li>\n\n          <li>\n            The \"script\" element embeds client-side scripts in the HTML document\n          </li>\n\n          <li>\n            The <span class=\"emphasis\">character set</span> element, sets the character encoding.\n\n            <ol>\n\n              <li type=\"i\">\n\n                <pre class=\"code\"><code>charset</code></pre>\n\n              </li>\n\n            </ol>\n\n          </li>\n\n          <li>\n            When the following attribute is set, the page will be in English.\n\n            <ol>\n\n              <li type=\"i\">\n\n                <pre class=\"code\"><code>lang=\"en\"</code></pre>\n\n              </li>\n\n            </ol>\n\n          </li>\n\n          <li>\n\n            The following element sets an HTTP header for content.\n\n            <ol>\n\n              <li type=\"i\">\n\n                <pre class=\"code\"><code>http-equiv</code></pre>\n\n              </li>\n\n            </ol>\n\n          </li>\n\n          <li>\n            The \"viewport\" element sets the default view for our webpage.\n          </li>\n\n          <li>\n            The \"section\" element divides content up into more organized sections based on thematic content.\n          </li>\n\n          <li>\n            The \"class\" attribute is used to define one or more classnames for an element.\n          </li>\n\n          <li>\n            The \"id\" attribute is a way to identify elements and select them.\n          </li>\n\n          <li>\n            Using the \"ul\" tag, creates an \"unordered list\" of items. This is a bulleted list.\n          </li>\n\n          <li>\n            Using the \"ol\" tag, creates an \"ordered list\". This is a numbered list.\n          </li>\n\n          <li>\n            Using the \"li\" tag, creates a \"list item\" for an unordered or ordered list.\n          </li>\n\n          <li>\n            If you put the following code in the HTML file it will block the\n            password from being viewed as it is typed.\n\n            <ol>\n\n              <li type=\"i\">\n\n                <pre class=\"code\"><code>input type=\"password</code></pre>\n\n              </li>\n\n            </ol>\n          </li>\n
`;

var cssListItems = "\n<li>\n            <span class=\"emphasis\">CSS</span> stands for \"<span class=\"emphasis\">Cascading Style Sheets</span>\".\n          </li>\n\n          <li>\n            CSS defines how webpage content is presented to users.\n          </li>\n\n          <li>\n            For example it defines things such as: webpage colors, aesthetics, visual, layout, and organization.\n          </li>\n\n          <li>\n            The three ways to style a webpage using CSS are: inline CSS, internal CSS, and external CSS.\n          </li>\n\n          <li>\n            When using an external CSS style sheet. You use a link element to link the HTML page to a separate CSS file.\n          </li>\n\n          <li>\n            When using \"external CSS\", the link is placed between the HTML files \"head\" elements.\n          </li>\n\n          <li>\n            A \"margin\" indicates how much space we want around the outside of an element.\n          </li>\n\n          <li>\n            A \"padding\" indicates how much space we want around the content inside an element.\n          </li>\n\n          <li>\n            The \".\" that precedes the \"card\" designates this as a class selector.\n          </li>\n\n          <li>\n            Any HTML element assigned to the class will gain whatever property assignments you defined in your CSS code.\n          </li>\n\n          <li>\n            The \"bow-shadow\" CSS property adds shadow effects around the elements frame.\n          </li>\n\n          <li>\n            Each box consists of margins outside the element, and the element's \"borders, padding, and content.\" This is\n            sometimes referred to as the \"CSS box model.\"\n          </li>\n\n          <li>\n            When trying to center something on a page, such as text or an image. It is best to use the\n            <span class=\"emphasis\">max-width</span> and <span class=\"emphasis\">min-width</span> commands in addition to\n            the <span class=\"emphasis\">width</span>\n            command if you want to really get more precise.\n          </li>\n";

var gitListItems = " \n        <li>\n          The \"<span class=\"emphasis\">git status</span>\": command <span class=\"emphasis\">checks</span> what <span\n            class=\"emphasis\">branch</span> we are <span class=\"emphasis\">currently</span> on.\n        </li>\n\n        <li>\n          The \"<span class=\"emphasis\">git checkout -b branch-name</span>\": command <span class=\"emphasis\">creates</span>\n          a <span class=\"emphasis\">new</span> branch and <span class=\"emphasis\">switches</span> to it.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">git add .</span> command is used to stage <span class=\"emphasis\">all changes</span>\n          <span id=\"git-add-1\">(new and modified files)</span> in the <span class=\"emphasis\">current directory</span>\n          and <span class=\"emphasis\">subdirectories</span>.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">git add -A</span> command (<span class=\"emphasis\">\"A\"</span> stands for <span\n            class=\"emphasis\">\"all\"</span>) stages <span class=\"emphasis\">all changes</span> in the entire working\n          directory (<span id=\"git-add-2\">new files, modified files, and deletions</span>).\n        </li>\n\n        <li>\n          The \"-m\": flag to associate a message with our commit.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">git branch -b branch name</span> command creates a branch, but does not check you\n          out to it.\n        </li>\n";

var gitSyncListItems = "\n<li>\n          When you are on or in the <span class=\"emphasis\"><em>main</span></em> branch <span\n            class=\"emphasis\">locally</span>. We have a\n          requirement to work on a <span class=\"emphasis\"><em>feature</span></em> or separate branch.\n        </li>\n\n        <li>\n          Checkout to a new branch with the git checkout -b <span class=\"emphasis\">branch name</span> command.\n        </li>\n\n        <ol type=\"I\">\n\n          <li>\n            This will create and checkout to the new <span class=\"emphasis\"><em></em>branch name</em></span>.\n          </li>\n\n        </ol>\n\n\n        <li>\n          Do the <span class=\"emphasis\"><em>commit</em></span> workflow as needed in this stage. This includes\n          <span class=\"emphasis\"><em>pushing</em></span> those <span class=\"emphasis\">commits</span> to GitHub.\n        </li>\n\n        <ol type=\"I\">\n          This means do either <span class=\"emphasis\">git add .</span> or <span class=\"emphasis\">git add -A</span>.\n        </ol>\n\n        <li>\n          Sync with GitHub with the <span class=\"emphasis\">git push</span> command.\n        </li>\n\n        <ol type=\"I\">\n          <li>\n            Warning this will prompt you with the following suggestion example:\n          </li>\n\n        </ol>\n\n        <ol type=\"i\">\n          <li>\n            <span class=\"emphasis\">push --set-upstream origin \"branch name\"</span>.\n          </li>\n\n          <li>\n            Now we will have a synced connection between <span class=\"emphasis\"><em>GitHub</em></span> and our\n            <span class=\"emphasis\"><em>local</em></span> branch.\n          </li>\n\n        </ol>\n\n        <li>\n          Work on your files/directories <span class=\"emphasis\"><em>locally</em></span>.\n        </li>\n\n        <li>\n          Create a <span class=\"emphasis\">Pull Request (PR)</span> in GitHub\n        </li>\n\n        <li>\n          Then do a <span class=\"emphasis\">Merge Pull Request</span>.\n        </li>\n\n        <li>\n          On the <span class=\"emphasis\"><em>local</em></span> device. If we are still not in <span\n            class=\"emphasis\"><em>main</em></span> branch,\n          we need to <span class=\"emphasis\"><em>checkout</em></span>.\n        </li>\n\n        <ol type=\"I\">\n\n          <li>\n            To checkout to the <span class=\"emphasis\"><em>main</em></span> branch, use the <span class=\"emphasis\">git\n              checkout main</span>\n            command.\n          </li>\n\n        </ol>\n\n        <li>\n          Then we need to bring all the changes living in GitHub remote/main branch to our local machine using the\n          <span class=\"emphasis\">git pull</span> command.\n        </li>\n\n        <li>\n          When you finish, rinse and repeat as needed.\n        </li>\n";

var javascriptListItems = "\n        <li>\n          JavaScript is a <span class=\"emphasis\">loosely-typed</span> langugage and can be prone to errors in your code.\n        </li>\n\n        <li>\n          A file extensions of <span class=\"emphasis\">\".js\"</span> indicates the file as a <span\n            class=\"emphasis\">\"JavaScript\" file.\n        </li>\n\n        <li>\n          A <span class=\"emphasis\">\"variable\"</span> is a <span class=\"emphasis\">named container</span> that allows us\n          to store data in our code.\n        </li>\n\n        <li>\n          Before previous changes to Javascript you would use the keyword \"var\" to create a \"variable\" in your code.\n        </li>\n\n        <li>\n          However, you now use <span class=\"emphasis\">\"const\"</span> or <span class=\"emphasis\">\"let\"</span> to create a\n          <span class=\"emphasis\">\"variable\"</span>.\n        </li>\n\n        <li>\n          In JavaScript a <span class=\"emphasis\">string</span> is surrounded by <span class=\"emphasis\">\"\"</span>.\n        </li>\n\n        <li>\n          The \"<span class=\"emphasis\">console.log()</span>\" method, allows you to output a message to the browsers <span\n            class=\"emphasis\">Console</span> tab by adding an \"<span class=\"emphasis\">argument</span>\".\n        </li>\n\n        <li>\n          An \"<span class=\"emphasis\">argument</span>\" is put inside the <span class=\"emphasis\">parenthesis</span>.\n        </li>\n\n        <li>\n          In JavaScript you can look inside of an <span class=\"emphasis\">object</span> for other <span\n            class=\"emphasis\">properties</span> using a \"<span class=\"emphasis\">.</span>\"\n        </li>\n\n        <li>\n          In the following example, \"<span class=\"emphasis\">document</span>\" contains a \"<span\n            class=\"emphasis\">property</span>\" of <span class=\"emphasis\">body</span>. <span class=\"emphasis\">body</span>\n          contains a <span class=\"emphasis\">property</span> of <span class=\"emphasis\">style</span>. <span\n            class=\"emphasis\">style</span> contains a <span class=\"emphasis\">property</span> of <span\n            class=\"emphasis\">backgroundColor</span>.\n\n          <ol>\n\n            <li type=\"i\">\n              <span id=\"js-example\">document.body.style.backgroundColor</span>\n            </li>\n\n          </ol>\n        </li>\n\n        <li>\n          A <span class=\"emphasis\">JavaScript</span> file is linked inside the \"<span class=\"emphasis\">body</span>\"\n          element. Whereas, <span class=\"emphasis\">CSS</span> is linked in the \"<span class=\"emphasis\">head</span>\"\n          element.\n        </li>\n\n        <li>\n          A <span class=\"emphasis\">group</span> of <span class=\"emphasis\">related data</span> in JavaScript is known as\n          an \"<span class=\"emphasis\">array</span>\".\n        </li>\n\n        <li><span class=\"emphasis\">Arrays</span> are especially useful when you want to perform a task on <span\n            class=\"emphasis\">multiple pieces</span> of data at <span class=\"emphasis\">once</span>.</li>\n\n        <li>\n          A <span class=\"emphasis\">for loop</span> uses the predictable pattern of \"<span\n            class=\"emphasis\">indices</span>\" to perform a task on\n          all items in an array, by\n          allowing a <span class=\"emphasis\">single code block</span> to be executed <span class=\"emphasis\">over and\n            over</span>.\n        </li>\n\n        <li>\n          A <span class=\"emphasis\">function</span>'s name is followed by \"<span class=\"emphasis\">( )</span>\".\n        </li>\n\n        <li>\n          The code for a function is also written inside curly brackets or \"<span class=\"emphasis\">{ }</span>\".\n        </li>\n\n        <li>\n          Control flow is the order in which a computer executes code in a script.\n        </li>\n\n        <li>\n          An <span class=\"emphasis\">object</span> in JavaScript is a group of <span class=\"emphasis\">key value\n            pairs</span>.\n        </li>\n\n        <li>\n          In a <span class=\"emphasis\">key value pair</span> The <span class=\"emphasis\">key</span> is the part before the\n          \"<span class=\"emphasis\">:</span>\"\n          symbol on the left. The part following the \"<span class=\"emphasis\">:</span>\" symbol is the <span\n            class=\"emphasis\">value</span>.\n        </li>\n\n        <li>\n          In the <span class=\"emphasis\">DevTools</span> of a browser. The \"<span class=\"emphasis\">{ }</span>\" signify an\n          object on the\n          <span class=\"emphasis\">Console</span> tab.\n        </li>\n\n        <li>\n          The \"<span class=\"emphasis\">[ ]</span>\" on a web broswers <span class=\"emphasis\">Console</span> tab indicate\n          the use of an\n          <span class=\"emphasis\">array</span>. This is also the case outside of the browser.\n        </li>\n\n        <li>\n          An <span class=\"emphasis\">array</span> can also be considered as a <span class=\"emphasis\">list</span> of items\n          that can be added to if\n          need be.\n        </li>\n\n        <li>\n          An <span class=\"emphasis\">object</span> is an example of one item that can have <span\n            class=\"emphasis\">multiple properties</span> to it.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">.length</span> command specifies the length of an array.\n        </li>\n\n        <li>\n          If for example you write <span class=\"emphasis\">let studentName = Tonya</span>. Then <span\n            class=\"emphasis\">studentName</span> is the\n          <span class=\"emphasis\">variable name</span> and <span class=\"emphasis\">Tonya</span> is the <span\n            class=\"emphasis\">value</span>.\n        </li>\n\n        <li>\n          <span class=\"emphasis\">Undefined</span> means the variable has not been defined or assigned to anything.\n        </li>\n\n        <li>\n          <span class=\"emphasis\">Null</span> means the <span class=\"emphasis\">variable</span> was <span\n            class=\"emphasis\">defined</span> as <span class=\"emphasis\">Null</span>.\n        </li>\n\n        <li>\n          Both <span class=\"emphasis\">Null</span> and <span class=\"emphasis\">Undefined</span> are different ways to say\n          nothing.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">modulus, (%)</span> operator is used to find if a number has a remainder. Which in\n          turn can help\n          you determine if the number is odd or even.\n        </li>\n\n        <li>\n          The (<span class=\"emphasis\">==</span>) helps determine if the variables are equal in value, but not by type.\n        </li>\n\n        <li>\n          The (<span class=\"emphasis\">!=</span>) helps determine if the variables are not equal in value.\n        </li>\n\n        <li>\n          The (<span class=\"emphasis\">===</span>) checks to see if the two variables are equal in type and value.\n        </li>\n\n        <li>\n          The (<span class=\"emphasis\">!==</span>) checks to see if the values and types are not equal.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">&&</span> operator checks that both expressions are true in value.\n        </li>\n\n        <li>\n          If you create a <span class=\"emphasis\">while loop</span> everytime the loop <span class=\"emphasis\">ends</span>\n          all <span class=\"emphasis\">previous variables</span> inside\n          the loop are <span class=\"emphasis\">refreshed</span> or <span class=\"emphasis\">thrown out</span>. In this\n          situation you can use <span class=\"emphasis\">const</span> instead of <span class=\"emphasis\">let</span>.\n        </li>\n\n        <li>\n          You can only use <span class=\"emphasis\">const</span> instead of <span class=\"emphasis\">let</span> inside of a\n          <span class=\"emphasis\">while loop</span> when you are <span class=\"emphasis\">NOT</span> changing the <span\n            class=\"emphasis\">value</span> of the variable anywhere else <span class=\"emphasis\">outside of</span> the\n          <span class=\"emphasis\">while</span> loop <span id=\"or\">OR</span> are <span id=\"not\">NOT</span> <span\n            class=\"emphasis\">reassigning</span> the variable anywhere else.\n        </li>\n\n        <li>\n          <span class=\"emphasis\">JSON.parse</span> is a static method that <span class=\"emphasis\">parses</span> a <span\n            class=\"emphasis\">JSON string</span>, constructing the\n          JavaScript value or object described by the string.\n        </li>\n\n        <li>\n          An optional <span class=\"emphasis\">reviver function</span> can be provided to perform a <span\n            class=\"emphasis\">transformation</span> on the <span class=\"emphasis\">resulting object</span> before it is\n          returned. In other words, it turns the <span class=\"emphasis\">string</span> back into an\n          <span class=\"emphasis\">object</span>.\n        </li>\n\n        <li>\n          <span class=\"emphasis\">JSON</span> stands for = <span class=\"emphasis\">JavaScript Object Notation</span>.\n        </li>\n\n        <li>\n          Always remember <span class=\"emphasis\">stringify</span> to <span class=\"emphasis\">set</span> and <span\n            class=\"emphasis\">parse</span> to <span class=\"emphasis\">get</span>.\n        </li>\n\n        <li>\n          Always use <span class=\"emphasis\">JSON.stringify</span> when doing <span class=\"emphasis\">\n            localStorage.setItem</span> first and then <span class=\"emphasis\">JSON.parse</span> to <span\n            class=\"emphasis\">localStorage.getItem</span> after.\n        </li>\n\n        <li>\n          When you <span class=\"emphasis\">setItem</span> it takes a key and a value, while <span\n            class=\"emphasis\">getItem</span> takes just the key.\n        </li>\n\n        <li>\n          <span class=\"emphasis\">localStorage.clear</span> clears all data from localStorage.\n        </li>\n";

var typescriptListItems = "\n<li>\n          <span class=\"emphasis\">TypeScript</span> is an open-sourced and <span class=\"emphasis\">strongly-typed</span\n            class=\"emphasis\"> syntactic <span class=\"emphasis\">superset</span> of JavaScript.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">Union operator</span> or \"<span class=\"emphasis\">|</span>\" is used when a <span\n            class=\"emphasis\">value</span> can be <span id=\"union-op\">more than one</span> single <span\n            class=\"emphasis\">type</span>.\n          Such as when a property can be a \"<span class=\"emphasis\">string</span>\" or a \"<span\n            class=\"emphasis\">number</span>\"\n        </li>\n\n        <li>\n          the \"<span class=\"emphasis\">void</span>\" in TypeScript serves as a <span class=\"emphasis\">primitive\n            type</span> and is a continuation\n          <span class=\"emphasis\">subtype</span> of <span class=\"emphasis\">undefined</span>.\n        </li>\n\n        <li>\n          A <span class=\"emphasis\">primitive</span> in TypeScript or programming in general, is a <span\n            class=\"emphasis\">basic data type</span> used to <span class=\"emphasis\">represent</span> simple <span\n            class=\"emphasis\">data</span> or <span class=\"emphasis\">values</span>. In other words, the <span\n            class=\"emphasis\">building blocks</span> or <span class=\"emphasis\">simplest form</span> of <span\n            class=\"emphasis\">data</span> that a programming language can understand.\n        </li>\n\n        <li>\n          TypeScript <span class=\"emphasis\">interfaces</span> and <span class=\"emphasis\">classes</span> should be <span\n            class=\"emphasis\">PascalCase</span>. Meaning the <span class=\"emphasis\">first letter</span> of <span\n            class=\"emphasis\">each word</span> is <span class=\"emphasis\">capitalized</span> and the rest are <span\n            class=\"emphasis\">lowercase</span>.\n        </li>\n\n        <li>\n          It is generally best practice to first <span class=\"emphasis\">define</span> the <span\n            class=\"emphasis\">interface</span> and its <span class=\"emphasis\">properties</span> or <span\n            class=\"emphasis\">key value pairs</span>.\n        </li>\n\n        <li>\n          If you do not know what you are going to define within an <span class=\"emphasis\">interface</span>. Then it is\n          best to create an <span class=\"emphasis\">object</span> first.\n        </li>\n\n        <li>\n          The only time you would an \"<span class=\"emphasis\">I</span>\" at the begining of an <span\n            class=\"emphasis\">interface</span>, is when their naming might conflict with TypeScript <span\n            class=\"emphasis\">classes</span>.\n        </li>\n\n        <li>\n          A <span class=\"emphasis\">constructor</span> <span id=\"function\">function</span> are functions that create\n          <span class=\"emphasis\">objects</span>.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">new</span> keyword creates a <span class=\"emphasis\">\"new\"</span> empty <span\n            class=\"emphasis\">object</span>.\n        </li>\n\n        <li>\n          The <span class=\"emphasis\">new</span> keyword then binds the newly created object to the <span\n            class=\"emphasis\">prototype</span> of the <span class=\"emphasis\">constructing function</span>.\n        </li>\n\n        <li>\n          When you make a <span class=\"emphasis\">property</span> or <span class=\"emphasis\">variable</span> <span\n            id=\"private\">private</span>. Then that <span class=\"emphasis\">property</span> or <span\n            class=\"emphasis\">variable</span> is only available in that <span class=\"emphasis\">class</span>.\n        </li>\n\n        <li>\n          You can <span class=\"emphasis\">destructure</span> an <span class=\"emphasis\">array</span> to turn its <span\n            class=\"emphasis\">values</span> into distinct <span class=\"emphasis\">variables</span>.\n        </li>\n\n        <li>\n          You can also <span class=\"emphasis\">destructure</span> an <span class=\"emphasis\">objects</span> <span\n            id=\"properties\">properties</span> into distinct <span class=\"emphasis\">variables</span> as well.\n        </li>\n";


function appendHtmlContent() {
    var htmlList = document.querySelector('.card:nth-of-type(1) .list-items');
    if (htmlList) {
        htmlList.innerHTML += htmlListItems;
    }
}
function appendCssContent() {
    var cssList = document.querySelector('.card:nth-of-type(2) .list-items');
    if (cssList) {
        cssList.innerHTML += cssListItems;
    }
}
function appendGitContent() {
    var gitList = document.querySelector('.card:nth-of-type(3) .list-items');
    if (gitList) {
        gitList.innerHTML += gitListItems;
    }
}

function appendGitSyncContent() {
    const gitOl = document.getElementById('git-ol');
    if (gitOl) {
        gitOl.innerHTML += gitSyncListItems;
    }
  }

  function appendJavaScriptContent() {
    var javascriptList = document.querySelector('.card:nth-of-type(4) .list-items');
    if (javascriptList) {
        javascriptList.innerHTML += javascriptListItems;
    }
}

function appendTypeScriptContent() {
    var typescriptList = document.querySelector('.card:nth-of-type(5) .list-items');
    if (typescriptList) {
        typescriptList.innerHTML += typescriptListItems;
    }
}

document.addEventListener('DOMContentLoaded', appendHtmlContent);
document.addEventListener('DOMContentLoaded', appendCssContent);
document.addEventListener('DOMContentLoaded', appendGitContent);
document.addEventListener('DOMContentLoaded', appendGitSyncContent);
document.addEventListener('DOMContentLoaded', appendJavaScriptContent);
document.addEventListener('DOMContentLoaded', appendTypeScriptContent);